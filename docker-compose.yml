version: '3.8'

services:
  # Caddy reverse proxy with automatic HTTPS
  gateway:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - app-network

  # Frontend web application
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    restart: unless-stopped
    expose:
      - "80"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL:-}
      - SQLITE_DB_PATH=${SQLITE_DB_PATH:-/data/app.db}
      - SQLITE_KEY_PATH=/run/secrets/sqlite_key
      - TELEGRAM_BOT_TOKEN_FILE=/run/secrets/telegram_bot_token
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
    volumes:
      - sqldata:/data
    secrets:
      - sqlite_key
      - telegram_bot_token
      - jwt_secret
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # PostgreSQL database (postgres profile)
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=appdb
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    profiles:
      - postgres

  # pgBouncer connection pooler (postgres profile)
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    restart: unless-stopped
    environment:
      - DATABASES_HOST=db
      - DATABASES_PORT=5432
      - DATABASES_USER=appuser
      - DATABASES_PASSWORD_FILE=/run/secrets/postgres_password
      - DATABASES_DBNAME=appdb
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=100
      - DEFAULT_POOL_SIZE=25
    volumes:
      - ./config/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
    secrets:
      - postgres_password
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "6432"
    networks:
      - app-network
    profiles:
      - postgres

  # pgBackRest backup service (postgres profile)
  pgbackrest:
    image: pgbackrest/pgbackrest:latest
    restart: unless-stopped
    environment:
      - PGBACKREST_STANZA=main
      - PGBACKREST_REPO1_PATH=/backup
      - PGBACKREST_LOG_LEVEL_CONSOLE=info
    volumes:
      - pgdata:/var/lib/postgresql/data:ro
      - backups:/backup
      - ./config/pgbackrest/pgbackrest.conf:/etc/pgbackrest/pgbackrest.conf:ro
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - postgres

  # SQLite database container (sqlite profile)
  sqlite-db:
    image: alpine:3.18
    restart: unless-stopped
    command: |
      sh -c '
        apk add --no-cache sqlite
        mkdir -p /data
        touch /data/app.db
        chmod 600 /data/app.db
        tail -f /dev/null
      '
    volumes:
      - sqldata:/data
    secrets:
      - sqlite_key
    healthcheck:
      test: ["CMD", "test", "-f", "/data/app.db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - app-network
    profiles:
      - sqlite

  # Litestream backup service (sqlite profile)
  litestream:
    image: litestream/litestream:latest
    restart: unless-stopped
    command: replicate
    environment:
      - LITESTREAM_ACCESS_KEY_ID_FILE=/run/secrets/minio_access_key
      - LITESTREAM_SECRET_ACCESS_KEY_FILE=/run/secrets/minio_secret_key
    volumes:
      - sqldata:/data:ro
      - ./config/litestream/litestream.yml:/etc/litestream.yml:ro
    secrets:
      - minio_access_key
      - minio_secret_key
    depends_on:
      sqlite-db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - sqlite

  # MinIO S3-compatible storage (sqlite profile)
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER_FILE=/run/secrets/minio_access_key
      - MINIO_ROOT_PASSWORD_FILE=/run/secrets/minio_secret_key
    volumes:
      - minio_data:/data
    secrets:
      - minio_access_key
      - minio_secret_key
    ports:
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    profiles:
      - sqlite

  # Watchtower for auto-updates (optional)
  watchtower:
    image: containrrr/watchtower:latest
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    profiles:
      - watchtower

volumes:
  caddy_data:
  caddy_config:
  pgdata:
  sqldata:
  minio_data:
  backups:

networks:
  app-network:
    driver: bridge

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  sqlite_key:
    file: ./secrets/sqlite_key.txt
  telegram_bot_token:
    file: ./secrets/telegram_bot_token.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  minio_access_key:
    file: ./secrets/minio_access_key.txt
  minio_secret_key:
    file: ./secrets/minio_secret_key.txt